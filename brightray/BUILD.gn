import("//build/config/ui.gni")

filenames_gypi = exec_script(
  "//build/gypi_to_gn.py",
  [ rebase_path("filenames.gypi") ],
  "scope",
  [ "filenames.gypi" ]
)


if (is_linux) {
  # TODO: Experiment with using //tools/generate_library_loader for generating
  # the libnotify loader.
  copy("libnotify_headers") {
    sources = [
      "/usr/include/libnotify/notify.h",
      "/usr/include/libnotify/notification.h",
      "/usr/include/libnotify/notify-enum-types.h",
      "/usr/include/libnotify/notify-features.h",
    ]
    outputs = [ "$target_gen_dir/libnotify-copy/libnotify/{{source_file_part}}" ]
  }
  config("libnotify_config") {
    include_dirs = [ "$target_gen_dir/libnotify-copy" ]
  }
  group("libnotify") {
    deps = [ ":libnotify_headers" ]
    public_configs = [ ":libnotify_config" ]
  }
}

static_library("brightray") {
  deps = [
    "//base",
    "//components/network_session_configurator/common",
    "//components/prefs",
    "//content/public/browser",
    "//content/shell:resources",
    "//net:net_with_v8",
    "//skia",
    "//ui/views",
  ]

  include_dirs = [
    "..",
  ]

  defines = [
    "DISABLE_NACL=1",
  ]

  if (is_linux) {
    deps += [
      "//build/config/linux/gtk3",
      ":libnotify",
    ]
  }

  extra_source_filters = []
  if (is_mac) {
    extra_source_filters += [
      "*_views.cc",
      "*_views.h",
      "*\bviews/*",
    ]
  }

  set_sources_assignment_filter(sources_assignment_filter + extra_source_filters)
  sources = filenames_gypi.brightray_sources
  set_sources_assignment_filter(sources_assignment_filter)
}
