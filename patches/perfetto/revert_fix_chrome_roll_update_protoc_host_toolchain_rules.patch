From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: deepak1556 <hop2deep@gmail.com>
Date: Wed, 11 Sep 2019 12:40:20 -0700
Subject: Revert "Fix chrome roll: update protoc host toolchain rules"

This reverts commit b7ebffd32830be65b752841d37de5455d84b42b8.

diff --git a/gn/BUILD.gn b/gn/BUILD.gn
index a8aecc1ac1aa0af60df335fafeee56dff337a189..5ead1b50fb43047081b29fa55d5c0eda7a5c8142 100644
--- a/gn/BUILD.gn
+++ b/gn/BUILD.gn
@@ -182,30 +182,28 @@ whitelisted_protobuf_full_deps = [
   "../src/trace_processor:trace_processor_shell",
 ]
 
-group("protoc") {
-  public_deps = [
-    "${perfetto_protobuf_target_prefix}:protoc($host_toolchain)",
-  ]
-}
+if (current_toolchain == host_toolchain) {
+  group("protoc") {
+    public_deps = [
+      "${perfetto_protobuf_target_prefix}:protoc",
+    ]
+  }
+}  # current_toolchain == host_toolchain
 
 # protoc compiler library, it's used for building protoc plugins and by
 # trace_processor_shell to dynamically load .proto files for metrics.
 group("protoc_lib") {
   visibility = whitelisted_protobuf_full_deps
-  if (current_toolchain == host_toolchain) {
-    public_deps = [
-      "${perfetto_protobuf_target_prefix}:protoc_lib",
-    ]
-  }
+  public_deps = [
+    "${perfetto_protobuf_target_prefix}:protoc_lib",
+  ]
 }
 
 group("protobuf_full") {
   visibility = whitelisted_protobuf_full_deps
-  if (current_toolchain == host_toolchain) {
-    public_deps = [
-      "${perfetto_protobuf_target_prefix}:protobuf_full",
-    ]
-  }
+  public_deps = [
+    "${perfetto_protobuf_target_prefix}:protobuf_full",
+  ]
 }
 
 group("protobuf_lite") {
diff --git a/gn/perfetto.gni b/gn/perfetto.gni
index 4bf62528336b5b6c8ce6eb932c18dcb6912422da..78aa3a63a677afc8789f58bb48e1dfac8a671eb9 100644
--- a/gn/perfetto.gni
+++ b/gn/perfetto.gni
@@ -161,8 +161,7 @@ declare_args() {
 
   # Misc host executable under tools/.
   enable_perfetto_tools =
-      (perfetto_build_standalone && current_toolchain == host_toolchain) ||
-      perfetto_build_with_android
+      perfetto_build_standalone || perfetto_build_with_android
 
   # Allows to build the UI (TypeScript/ HTML / WASM)
   enable_perfetto_ui = perfetto_build_standalone
diff --git a/tools/gen_android_bp b/tools/gen_android_bp
index 05a7d508bd51dc83f4b7039fccbb2b7415c0b208..f01e95d5de4bbfd1c8658bfbb6b7e061bfe6b632 100755
--- a/tools/gen_android_bp
+++ b/tools/gen_android_bp
@@ -136,12 +136,23 @@ additional_args = {
 def enable_gmock(module):
     module.static_libs.append('libgmock')
 
+
+def enable_gtest_prod(module):
+    module.static_libs.append('libgtest_prod')
+
+
+def enable_gtest(module):
+    assert module.type == 'cc_test'
+
+
 def enable_protobuf_full(module):
     module.shared_libs.append('libprotobuf-cpp-full')
 
+
 def enable_protobuf_lite(module):
     module.shared_libs.append('libprotobuf-cpp-lite')
 
+
 def enable_protoc_lib(module):
     module.shared_libs.append('libprotoc')
 
@@ -171,14 +182,16 @@ def enable_zlib(module):
 # Android equivalents for third-party libraries that the upstream project
 # depends on.
 builtin_deps = {
-    '//gn:gtest_and_gmock': enable_gmock,
-    '//gn:libunwind': enable_libunwind,
-    '//gn:protobuf_full': enable_protobuf_full,
-    '//gn:protobuf_lite': enable_protobuf_lite,
-    '//gn:protoc_lib': enable_protoc_lib,
-    '//gn:libunwindstack': enable_libunwindstack,
-    '//gn:sqlite': enable_sqlite,
-    '//gn:zlib': enable_zlib,
+    '//buildtools:gmock': enable_gmock,
+    '//buildtools:gtest': enable_gtest,
+    '//buildtools:gtest_main': enable_gtest,
+    '//buildtools:libunwind': enable_libunwind,
+    '//buildtools:protobuf_full': enable_protobuf_full,
+    '//buildtools:protobuf_lite': enable_protobuf_lite,
+    '//buildtools:protoc_lib': enable_protoc_lib,
+    '//buildtools:libunwindstack': enable_libunwindstack,
+    '//buildtools:sqlite': enable_sqlite,
+    '//buildtools:zlib': enable_zlib,
 }
 
 # ----------------------------------------------------------------------------
@@ -401,10 +414,7 @@ def apply_module_dependency(blueprint, desc, module, dep_name):
         dep_name: GN target of the dependency.
     """
     # If the dependency refers to a library which we can replace with an Android
-    # equivalent, stop recursing and patch the dependency in. Don't recurse into
-    # //buildtools, builtin_deps are intercepted at the //gn:xxx level.
-    if dep_name.startswith('//buildtools'):
-        return
+    # equivalent, stop recursing and patch the dependency in.
     if gn_utils.label_without_toolchain(dep_name) in builtin_deps:
         builtin_deps[gn_utils.label_without_toolchain(dep_name)](module)
         return
