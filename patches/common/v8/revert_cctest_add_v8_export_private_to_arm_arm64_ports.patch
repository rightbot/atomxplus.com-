From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jeremy Apthorp <jeremya@chromium.org>
Date: Mon, 15 Apr 2019 18:06:12 -0700
Subject: Revert "[cctest] Add V8_EXPORT_PRIVATE to arm/arm64 ports"

This reverts commit 1a7d847cfac9a7363c59c980e47a7b7ff416e6da.

diff --git a/src/arm/assembler-arm.h b/src/arm/assembler-arm.h
index e3b079c32e8f8a29abfe117cba44d3b75f53c49d..e85d0108effe3abb3b88a1a41cce0234751759ef 100644
--- a/src/arm/assembler-arm.h
+++ b/src/arm/assembler-arm.h
@@ -79,7 +79,7 @@ enum Coprocessor {
 // Machine instruction Operands
 
 // Class Operand represents a shifter operand in data processing instructions
-class V8_EXPORT_PRIVATE Operand {
+class Operand {
  public:
   // immediate
   V8_INLINE explicit Operand(int32_t immediate,
@@ -185,8 +185,9 @@ class V8_EXPORT_PRIVATE Operand {
   friend class Assembler;
 };
 
+
 // Class MemOperand represents a memory operand in load and store instructions
-class V8_EXPORT_PRIVATE MemOperand {
+class MemOperand {
  public:
   // [rn +/- offset]      Offset/NegOffset
   // [rn +/- offset]!     PreIndex/NegPreIndex
@@ -242,9 +243,10 @@ class V8_EXPORT_PRIVATE MemOperand {
   friend class Assembler;
 };
 
+
 // Class NeonMemOperand represents a memory operand in load and
 // store NEON instructions
-class V8_EXPORT_PRIVATE NeonMemOperand {
+class NeonMemOperand {
  public:
   // [rn {:align}]       Offset
   // [rn {:align}]!      PostIndex
@@ -265,6 +267,7 @@ class V8_EXPORT_PRIVATE NeonMemOperand {
   int align_;
 };
 
+
 // Class NeonListOperand represents a list of NEON registers
 class NeonListOperand {
  public:
@@ -1391,7 +1394,7 @@ class PatchingAssembler : public Assembler {
 // state, even if the list is modified by some other means. Note that this scope
 // can be nested but the destructors need to run in the opposite order as the
 // constructors. We do not have assertions for this.
-class V8_EXPORT_PRIVATE UseScratchRegisterScope {
+class UseScratchRegisterScope {
  public:
   explicit UseScratchRegisterScope(Assembler* assembler);
   ~UseScratchRegisterScope();
diff --git a/src/arm64/assembler-arm64.h b/src/arm64/assembler-arm64.h
index 2492f30278adae9fb3ff9e995cb9328b4ae8694c..f0ac332c21eb1172324f728c74ae40e131763fd1 100644
--- a/src/arm64/assembler-arm64.h
+++ b/src/arm64/assembler-arm64.h
@@ -49,7 +49,7 @@ class Immediate {
   RelocInfo::Mode rmode() const { return rmode_; }
 
  private:
-  V8_EXPORT_PRIVATE void InitializeHandle(Handle<HeapObject> value);
+  void InitializeHandle(Handle<HeapObject> value);
 
   int64_t value_;
   RelocInfo::Mode rmode_;
diff --git a/src/arm64/decoder-arm64.h b/src/arm64/decoder-arm64.h
index 477a126344a50eb9cf29cce216792a53ae98393e..a89bf38980e711c16caaf7a0158e36480b8ba978 100644
--- a/src/arm64/decoder-arm64.h
+++ b/src/arm64/decoder-arm64.h
@@ -86,7 +86,7 @@ namespace internal {
 
 // The Visitor interface. Disassembler and simulator (and other tools)
 // must provide implementations for all of these functions.
-class V8_EXPORT_PRIVATE DecoderVisitor {
+class DecoderVisitor {
  public:
   virtual ~DecoderVisitor() {}
 
@@ -95,8 +95,9 @@ class V8_EXPORT_PRIVATE DecoderVisitor {
   #undef DECLARE
 };
 
+
 // A visitor that dispatches to a list of visitors.
-class V8_EXPORT_PRIVATE DispatchingDecoderVisitor : public DecoderVisitor {
+class DispatchingDecoderVisitor : public DecoderVisitor {
  public:
   DispatchingDecoderVisitor() {}
   virtual ~DispatchingDecoderVisitor() {}
@@ -141,6 +142,7 @@ class V8_EXPORT_PRIVATE DispatchingDecoderVisitor : public DecoderVisitor {
   std::list<DecoderVisitor*> visitors_;
 };
 
+
 template<typename V>
 class Decoder : public V {
  public:
diff --git a/src/arm64/disasm-arm64.h b/src/arm64/disasm-arm64.h
index 8e218b5cf80635ddfdef03c3366e692e5ec01c15..0edb2ea58343af0aab71f8e79310270f9e847914 100644
--- a/src/arm64/disasm-arm64.h
+++ b/src/arm64/disasm-arm64.h
@@ -14,7 +14,8 @@
 namespace v8 {
 namespace internal {
 
-class V8_EXPORT_PRIVATE DisassemblingDecoder : public DecoderVisitor {
+
+class DisassemblingDecoder : public DecoderVisitor {
  public:
   DisassemblingDecoder();
   DisassemblingDecoder(char* text_buffer, int buffer_size);
@@ -79,7 +80,8 @@ class V8_EXPORT_PRIVATE DisassemblingDecoder : public DecoderVisitor {
   bool own_buffer_;
 };
 
-class V8_EXPORT_PRIVATE PrintDisassembler : public DisassemblingDecoder {
+
+class PrintDisassembler : public DisassemblingDecoder {
  public:
   explicit PrintDisassembler(FILE* stream) : stream_(stream) { }
   ~PrintDisassembler() { }
@@ -90,6 +92,7 @@ class V8_EXPORT_PRIVATE PrintDisassembler : public DisassemblingDecoder {
   FILE *stream_;
 };
 
+
 }  // namespace internal
 }  // namespace v8
 
diff --git a/src/arm64/instructions-arm64-constants.cc b/src/arm64/instructions-arm64-constants.cc
index 5c0d42a8c633738e2cae777114fde7aa8671a556..7559946cb165ec1fd8c1cfd0c9bd77cc0d582f86 100644
--- a/src/arm64/instructions-arm64-constants.cc
+++ b/src/arm64/instructions-arm64-constants.cc
@@ -4,7 +4,6 @@
 
 #include <cstdint>
 #include "include/v8config.h"
-#include "src/base/macros.h"
 
 namespace v8 {
 namespace internal {
@@ -29,25 +28,23 @@ extern "C" {
 
 extern const uint16_t kFP16PositiveInfinity = 0x7C00;
 extern const uint16_t kFP16NegativeInfinity = 0xFC00;
-V8_EXPORT_PRIVATE extern const uint32_t kFP32PositiveInfinity = 0x7F800000;
-V8_EXPORT_PRIVATE extern const uint32_t kFP32NegativeInfinity = 0xFF800000;
-V8_EXPORT_PRIVATE extern const uint64_t kFP64PositiveInfinity =
-    0x7FF0000000000000UL;
-V8_EXPORT_PRIVATE extern const uint64_t kFP64NegativeInfinity =
-    0xFFF0000000000000UL;
+extern const uint32_t kFP32PositiveInfinity = 0x7F800000;
+extern const uint32_t kFP32NegativeInfinity = 0xFF800000;
+extern const uint64_t kFP64PositiveInfinity = 0x7FF0000000000000UL;
+extern const uint64_t kFP64NegativeInfinity = 0xFFF0000000000000UL;
 
 // This value is a signalling NaN as both a double and as a float (taking the
 // least-significant word).
-V8_EXPORT_PRIVATE extern const uint64_t kFP64SignallingNaN = 0x7FF000007F800001;
-V8_EXPORT_PRIVATE extern const uint32_t kFP32SignallingNaN = 0x7F800001;
+extern const uint64_t kFP64SignallingNaN = 0x7FF000007F800001;
+extern const uint32_t kFP32SignallingNaN = 0x7F800001;
 
 // A similar value, but as a quiet NaN.
-V8_EXPORT_PRIVATE extern const uint64_t kFP64QuietNaN = 0x7FF800007FC00001;
-V8_EXPORT_PRIVATE extern const uint32_t kFP32QuietNaN = 0x7FC00001;
+extern const uint64_t kFP64QuietNaN = 0x7FF800007FC00001;
+extern const uint32_t kFP32QuietNaN = 0x7FC00001;
 
 // The default NaN values (for FPCR.DN=1).
-V8_EXPORT_PRIVATE extern const uint64_t kFP64DefaultNaN = 0x7FF8000000000000UL;
-V8_EXPORT_PRIVATE extern const uint32_t kFP32DefaultNaN = 0x7FC00000;
+extern const uint64_t kFP64DefaultNaN = 0x7FF8000000000000UL;
+extern const uint32_t kFP32DefaultNaN = 0x7FC00000;
 extern const uint16_t kFP16DefaultNaN = 0x7E00;
 
 #if defined(V8_OS_WIN)
diff --git a/src/arm64/instructions-arm64.h b/src/arm64/instructions-arm64.h
index 8514469227042b5740da73d42fc210a2282414e4..6f46e4b88c2e7c77f6fd58567e9aa2ae31a54246 100644
--- a/src/arm64/instructions-arm64.h
+++ b/src/arm64/instructions-arm64.h
@@ -26,23 +26,23 @@ extern "C" {
 
 extern const float16 kFP16PositiveInfinity;
 extern const float16 kFP16NegativeInfinity;
-V8_EXPORT_PRIVATE extern const float kFP32PositiveInfinity;
-V8_EXPORT_PRIVATE extern const float kFP32NegativeInfinity;
-V8_EXPORT_PRIVATE extern const double kFP64PositiveInfinity;
-V8_EXPORT_PRIVATE extern const double kFP64NegativeInfinity;
+extern const float kFP32PositiveInfinity;
+extern const float kFP32NegativeInfinity;
+extern const double kFP64PositiveInfinity;
+extern const double kFP64NegativeInfinity;
 
 // This value is a signalling NaN as both a double and as a float (taking the
 // least-significant word).
-V8_EXPORT_PRIVATE extern const double kFP64SignallingNaN;
-V8_EXPORT_PRIVATE extern const float kFP32SignallingNaN;
+extern const double kFP64SignallingNaN;
+extern const float kFP32SignallingNaN;
 
 // A similar value, but as a quiet NaN.
-V8_EXPORT_PRIVATE extern const double kFP64QuietNaN;
-V8_EXPORT_PRIVATE extern const float kFP32QuietNaN;
+extern const double kFP64QuietNaN;
+extern const float kFP32QuietNaN;
 
 // The default NaN values (for FPCR.DN=1).
-V8_EXPORT_PRIVATE extern const double kFP64DefaultNaN;
-V8_EXPORT_PRIVATE extern const float kFP32DefaultNaN;
+extern const double kFP64DefaultNaN;
+extern const float kFP32DefaultNaN;
 extern const float16 kFP16DefaultNaN;
 
 #if defined(V8_OS_WIN)
@@ -401,11 +401,11 @@ class Instruction {
   // Find the PC offset encoded in this instruction. 'this' may be a branch or
   // a PC-relative addressing instruction.
   // The offset returned is unscaled.
-  V8_EXPORT_PRIVATE int64_t ImmPCOffset();
+  int64_t ImmPCOffset();
 
   // Find the target of this instruction. 'this' may be a branch or a
   // PC-relative addressing instruction.
-  V8_EXPORT_PRIVATE Instruction* ImmPCOffsetTarget();
+  Instruction* ImmPCOffsetTarget();
 
   static bool IsValidImmPCOffset(ImmBranchType branch_type, ptrdiff_t offset);
   bool IsTargetInImmPCOffsetRange(Instruction* target);
diff --git a/src/arm64/macro-assembler-arm64.h b/src/arm64/macro-assembler-arm64.h
index d345475f18a671879bcf6f5e9063cbcd5b20241b..c607496b373c27b9002c09b5c6d896fc18cf6a92 100644
--- a/src/arm64/macro-assembler-arm64.h
+++ b/src/arm64/macro-assembler-arm64.h
@@ -2082,7 +2082,7 @@ class InstructionAccurateScope {
 // original state, even if the lists were modified by some other means. Note
 // that this scope can be nested but the destructors need to run in the opposite
 // order as the constructors. We do not have assertions for this.
-class V8_EXPORT_PRIVATE UseScratchRegisterScope {
+class UseScratchRegisterScope {
  public:
   explicit UseScratchRegisterScope(TurboAssembler* tasm)
       : available_(tasm->TmpList()),
@@ -2110,8 +2110,7 @@ class V8_EXPORT_PRIVATE UseScratchRegisterScope {
   VRegister AcquireSameSizeAs(const VRegister& reg);
 
  private:
-  static CPURegister AcquireNextAvailable(
-      CPURegList* available);
+  static CPURegister AcquireNextAvailable(CPURegList* available);
 
   // Available scratch registers.
   CPURegList* available_;     // kRegister
diff --git a/src/arm64/register-arm64.h b/src/arm64/register-arm64.h
index 54b927c3f407bfdaf69e8312360da9cd31c159d1..1da32ae6f4f0a9ee082a4e5c4e9871259a14cdef 100644
--- a/src/arm64/register-arm64.h
+++ b/src/arm64/register-arm64.h
@@ -316,14 +316,14 @@ VectorFormat ScalarFormatFromLaneSize(int lanesize);
 VectorFormat VectorFormatHalfWidthDoubleLanes(VectorFormat vform);
 VectorFormat VectorFormatFillQ(VectorFormat vform);
 VectorFormat ScalarFormatFromFormat(VectorFormat vform);
-V8_EXPORT_PRIVATE unsigned RegisterSizeInBitsFromFormat(VectorFormat vform);
+unsigned RegisterSizeInBitsFromFormat(VectorFormat vform);
 unsigned RegisterSizeInBytesFromFormat(VectorFormat vform);
 int LaneSizeInBytesFromFormat(VectorFormat vform);
 unsigned LaneSizeInBitsFromFormat(VectorFormat vform);
 int LaneSizeInBytesLog2FromFormat(VectorFormat vform);
-V8_EXPORT_PRIVATE int LaneCountFromFormat(VectorFormat vform);
+int LaneCountFromFormat(VectorFormat vform);
 int MaxLaneCountFromFormat(VectorFormat vform);
-V8_EXPORT_PRIVATE bool IsVectorFormat(VectorFormat vform);
+bool IsVectorFormat(VectorFormat vform);
 int64_t MaxIntFromFormat(VectorFormat vform);
 int64_t MinIntFromFormat(VectorFormat vform);
 uint64_t MaxUintFromFormat(VectorFormat vform);
@@ -529,7 +529,7 @@ bool AreAliased(const CPURegister& reg1, const CPURegister& reg2,
 // same size, and are of the same type. The system stack pointer may be
 // specified. Arguments set to NoReg are ignored, as are any subsequent
 // arguments. At least one argument (reg1) must be valid (not NoCPUReg).
-V8_EXPORT_PRIVATE bool AreSameSizeAndType(
+bool AreSameSizeAndType(
     const CPURegister& reg1, const CPURegister& reg2 = NoCPUReg,
     const CPURegister& reg3 = NoCPUReg, const CPURegister& reg4 = NoCPUReg,
     const CPURegister& reg5 = NoCPUReg, const CPURegister& reg6 = NoCPUReg,
@@ -546,10 +546,9 @@ bool AreSameFormat(const VRegister& reg1, const VRegister& reg2,
 // consecutive in the register file. Arguments may be set to NoVReg, and if so,
 // subsequent arguments must also be NoVReg. At least one argument (reg1) must
 // be valid (not NoVReg).
-V8_EXPORT_PRIVATE bool AreConsecutive(const VRegister& reg1,
-                                      const VRegister& reg2,
-                                      const VRegister& reg3 = NoVReg,
-                                      const VRegister& reg4 = NoVReg);
+bool AreConsecutive(const VRegister& reg1, const VRegister& reg2,
+                    const VRegister& reg3 = NoVReg,
+                    const VRegister& reg4 = NoVReg);
 
 typedef VRegister FloatRegister;
 typedef VRegister DoubleRegister;
@@ -557,7 +556,7 @@ typedef VRegister Simd128Register;
 
 // -----------------------------------------------------------------------------
 // Lists of registers.
-class V8_EXPORT_PRIVATE CPURegList {
+class CPURegList {
  public:
   template <typename... CPURegisters>
   explicit CPURegList(CPURegister reg0, CPURegisters... regs)
diff --git a/src/arm64/simulator-arm64.h b/src/arm64/simulator-arm64.h
index 2a5e25518badddd77febee11debdfb90868f8b8b..673ff8710cabad467fc08556ab96d3737c6d3e03 100644
--- a/src/arm64/simulator-arm64.h
+++ b/src/arm64/simulator-arm64.h
@@ -656,11 +656,10 @@ class Simulator : public DecoderVisitor, public SimulatorBase {
     USE(size);
   }
 
-  V8_EXPORT_PRIVATE explicit Simulator(
-      Decoder<DispatchingDecoderVisitor>* decoder, Isolate* isolate = nullptr,
-      FILE* stream = stderr);
+  explicit Simulator(Decoder<DispatchingDecoderVisitor>* decoder,
+                     Isolate* isolate = nullptr, FILE* stream = stderr);
   Simulator();
-  V8_EXPORT_PRIVATE ~Simulator();
+  ~Simulator();
 
   // System functions.
 
@@ -745,7 +744,7 @@ class Simulator : public DecoderVisitor, public SimulatorBase {
   // Accessor to the internal simulator stack area.
   uintptr_t StackLimit(uintptr_t c_limit) const;
 
-  V8_EXPORT_PRIVATE void ResetState();
+  void ResetState();
 
   void DoRuntimeCall(Instruction* instr);
 
@@ -753,7 +752,7 @@ class Simulator : public DecoderVisitor, public SimulatorBase {
   static const Instruction* kEndOfSimAddress;
   void DecodeInstruction();
   void Run();
-  V8_EXPORT_PRIVATE void RunFrom(Instruction* start);
+  void RunFrom(Instruction* start);
 
   // Simulation helpers.
   template <typename T>
diff --git a/src/arm64/utils-arm64.h b/src/arm64/utils-arm64.h
index 00ed1c20c31bd312fe02920713fb0b937f1fa30e..f57dc861731c5146e26702147841a75dd045efd8 100644
--- a/src/arm64/utils-arm64.h
+++ b/src/arm64/utils-arm64.h
@@ -33,8 +33,8 @@ int float16classify(float16 value);
 // Bit counting.
 int CountLeadingZeros(uint64_t value, int width);
 int CountLeadingSignBits(int64_t value, int width);
-V8_EXPORT_PRIVATE int CountTrailingZeros(uint64_t value, int width);
-V8_EXPORT_PRIVATE int CountSetBits(uint64_t value, int width);
+int CountTrailingZeros(uint64_t value, int width);
+int CountSetBits(uint64_t value, int width);
 int LowestSetBitPosition(uint64_t value);
 int HighestSetBitPosition(uint64_t value);
 uint64_t LargestPowerOf2Divisor(uint64_t value);
diff --git a/src/codegen/code-comments.h b/src/codegen/code-comments.h
index f366cd5547885d9e5dca19dd9177322dc375fa7c..fb4d47b6ec4e8982951e96f0226dbaf25185545c 100644
--- a/src/codegen/code-comments.h
+++ b/src/codegen/code-comments.h
@@ -35,7 +35,7 @@ struct CodeCommentEntry {
 
 class CodeCommentsWriter {
  public:
-  V8_EXPORT_PRIVATE void Add(uint32_t pc_offset, std::string comment);
+  void Add(uint32_t pc_offset, std::string comment);
   void Emit(Assembler* assm);
   size_t entry_count() const;
   uint32_t section_size() const;
diff --git a/src/diagnostics/disasm.h b/src/diagnostics/disasm.h
index 2fe14f19321c67aaf1dd388472b14c8b5fbfe400..fcc38eb3b2242ce65f872636b9121c66f94b987a 100644
--- a/src/diagnostics/disasm.h
+++ b/src/diagnostics/disasm.h
@@ -14,7 +14,7 @@ typedef unsigned char byte;
 // Interface and default implementation for converting addresses and
 // register-numbers to text.  The default implementation is machine
 // specific.
-class V8_EXPORT_PRIVATE NameConverter {
+class NameConverter {
  public:
   virtual ~NameConverter() = default;
   virtual const char* NameOfCPURegister(int reg) const;
@@ -34,6 +34,7 @@ class V8_EXPORT_PRIVATE NameConverter {
   v8::internal::EmbeddedVector<char, 128> tmp_buffer_;
 };
 
+
 // A generic Disassembler interface
 class Disassembler {
  public:
@@ -55,8 +56,7 @@ class Disassembler {
 
   // Writes one disassembled instruction into 'buffer' (0-terminated).
   // Returns the length of the disassembled machine instruction in bytes.
-  V8_EXPORT_PRIVATE int InstructionDecode(v8::internal::Vector<char> buffer,
-                                          byte* instruction);
+  int InstructionDecode(v8::internal::Vector<char> buffer, byte* instruction);
 
   // Returns -1 if instruction does not mark the beginning of a constant pool,
   // or the number of entries in the constant pool beginning here.
diff --git a/src/diagnostics/disassembler.h b/src/diagnostics/disassembler.h
index db1b8de69b8d0efff6a7f72094e2298a34753b8b..a58702f0d6bb572a666c0261c84c68a57afb390b 100644
--- a/src/diagnostics/disassembler.h
+++ b/src/diagnostics/disassembler.h
@@ -20,10 +20,8 @@ class Disassembler : public AllStatic {
   // Instruction'.
   // the code object is used for name resolution and may be null.
   // TODO(titzer): accept a {WasmCodeManager*} if {isolate} is null
-  V8_EXPORT_PRIVATE static int Decode(Isolate* isolate, std::ostream* os,
-                                      byte* begin, byte* end,
-                                      CodeReference code = {},
-                                      Address current_pc = kNullAddress);
+  static int Decode(Isolate* isolate, std::ostream* os, byte* begin, byte* end,
+                    CodeReference code = {}, Address current_pc = kNullAddress);
 };
 
 }  // namespace internal
diff --git a/src/objects.cc b/src/objects.cc
index b29e37fa1cc451daafc80a53265fd02346e88220..f425ce8367e7edc050abb48fc2af9ede188ae1c8 100644
--- a/src/objects.cc
+++ b/src/objects.cc
@@ -1238,7 +1238,7 @@ bool Object::ToInt32(int32_t* value) {
 // static constexpr object declarations need a definition to make the
 // compiler happy.
 constexpr Object Smi::kZero;
-V8_EXPORT_PRIVATE constexpr Object SharedFunctionInfo::kNoSharedNameSentinel;
+constexpr Object SharedFunctionInfo::kNoSharedNameSentinel;
 
 Handle<SharedFunctionInfo> FunctionTemplateInfo::GetOrCreateSharedFunctionInfo(
     Isolate* isolate, Handle<FunctionTemplateInfo> info,
diff --git a/src/objects/code.h b/src/objects/code.h
index a23763d893bda0003016d84b8f6f8d2c21365fcb..a078d30f2d84e65b087a3bcaf88002f1007a8034 100644
--- a/src/objects/code.h
+++ b/src/objects/code.h
@@ -650,10 +650,9 @@ class DependentCode : public WeakFixedArray {
   };
 
   // Register a code dependency of {cell} on {object}.
-  V8_EXPORT_PRIVATE static void InstallDependency(Isolate* isolate,
-                                                  const MaybeObjectHandle& code,
-                                                  Handle<HeapObject> object,
-                                                  DependencyGroup group);
+  static void InstallDependency(Isolate* isolate, const MaybeObjectHandle& code,
+                                Handle<HeapObject> object,
+                                DependencyGroup group);
 
   void DeoptimizeDependentCodeGroup(Isolate* isolate, DependencyGroup group);
 
diff --git a/src/objects/shared-function-info.h b/src/objects/shared-function-info.h
index 40d40e182917e4c7b9b6afec70c4735c89d7c5bb..e06c9eb74a8c3b8bbcaab8fb0b1f29d9f981ae46 100644
--- a/src/objects/shared-function-info.h
+++ b/src/objects/shared-function-info.h
@@ -221,9 +221,7 @@ class InterpreterData : public Struct {
 class SharedFunctionInfo : public HeapObject {
  public:
   NEVER_READ_ONLY_SPACE
-
-  V8_EXPORT_PRIVATE static constexpr Object const kNoSharedNameSentinel =
-      Smi::kZero;
+  static constexpr Object const kNoSharedNameSentinel = Smi::kZero;
 
   // [name]: Returns shared name if it exists or an empty string otherwise.
   inline String Name() const;
diff --git a/src/objects/string.cc b/src/objects/string.cc
index 732dd38e21789c70ada0baa4d7d2bd2232dd83b7..5818701376b2754ffcef4aa4bf859c8b5145e25a 100644
--- a/src/objects/string.cc
+++ b/src/objects/string.cc
@@ -1624,8 +1624,5 @@ String ConsStringIterator::NextLeaf(bool* blew_stack) {
   UNREACHABLE();
 }
 
-template EXPORT_TEMPLATE_DEFINE(V8_EXPORT_PRIVATE) void String::WriteToFlat(
-    String source, uint16_t* sink, int from, int to);
-
 }  // namespace internal
 }  // namespace v8
diff --git a/src/objects/string.h b/src/objects/string.h
index c7e9460904afe50613d811363d5d4c1281796fad..5b152501196c7aff9311f07e7262e4919a3a2a30 100644
--- a/src/objects/string.h
+++ b/src/objects/string.h
@@ -6,7 +6,6 @@
 #define V8_OBJECTS_STRING_H_
 
 #include "src/base/bits.h"
-#include "src/base/export-template.h"
 #include "src/objects/instance-type.h"
 #include "src/objects/name.h"
 #include "src/objects/smi.h"
@@ -369,8 +368,8 @@ class String : public Name {
 
   // Helper function for flattening strings.
   template <typename sinkchar>
-  EXPORT_TEMPLATE_DECLARE(V8_EXPORT_PRIVATE)
-  static void WriteToFlat(String source, sinkchar* sink, int from, int to);
+  V8_EXPORT_PRIVATE static void WriteToFlat(String source, sinkchar* sink,
+                                            int from, int to);
 
   static inline bool IsAscii(const char* chars, int length) {
     return IsAscii(reinterpret_cast<const uint8_t*>(chars), length);
@@ -456,11 +455,6 @@ class String : public Name {
   OBJECT_CONSTRUCTORS(String, Name);
 };
 
-// clang-format off
-extern template EXPORT_TEMPLATE_DECLARE(V8_EXPORT_PRIVATE)
-void String::WriteToFlat(String source, uint16_t* sink, int from, int to);
-// clang-format on
-
 class SubStringRange {
  public:
   inline SubStringRange(String string, const DisallowHeapAllocation& no_gc,
diff --git a/src/regexp/jsregexp.h b/src/regexp/jsregexp.h
index 9866caa900888273de74cfb012845748931d0fd0..4c7526a59342743f6068e5c61d24c8dad4efd43f 100644
--- a/src/regexp/jsregexp.h
+++ b/src/regexp/jsregexp.h
@@ -1513,8 +1513,7 @@ class RegExpEngine: public AllStatic {
 
   static bool TooMuchRegExpCode(Isolate* isolate, Handle<String> pattern);
 
-  V8_EXPORT_PRIVATE static void DotPrint(const char* label, RegExpNode* node,
-                                         bool ignore_case);
+  static void DotPrint(const char* label, RegExpNode* node, bool ignore_case);
 };
 
 
diff --git a/src/wasm/wasm-module.h b/src/wasm/wasm-module.h
index e1184c40b8482891352dbeaad8b49d2c29ec19e2..284e8fae87a90f7056346bc074388270af48914e 100644
--- a/src/wasm/wasm-module.h
+++ b/src/wasm/wasm-module.h
@@ -120,7 +120,7 @@ struct WasmElemSegment {
 
   // Used in the {entries} vector to represent a `ref.null` entry in a passive
   // segment.
-  V8_EXPORT_PRIVATE static const uint32_t kNullIndex = ~0u;
+  static const uint32_t kNullIndex = ~0u;
 
   uint32_t table_index;
   WasmInitExpr offset;
diff --git a/test/cctest/parsing/test-parse-decision.cc b/test/cctest/parsing/test-parse-decision.cc
index 37ce657d44d09ce31506bb25fac25ae73fb6fc75..93bfb4776dee9f323b438bcce00194d75547f257 100644
--- a/test/cctest/parsing/test-parse-decision.cc
+++ b/test/cctest/parsing/test-parse-decision.cc
@@ -14,7 +14,6 @@
 #include "src/execution/isolate.h"
 #include "src/handles/handles-inl.h"
 #include "src/objects-inl.h"
-#include "src/objects/shared-function-info-inl.h"
 #include "src/utils.h"
 
 #include "test/cctest/cctest.h"
