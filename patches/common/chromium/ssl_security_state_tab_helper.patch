From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: deepak1556 <hop2deep@gmail.com>
Date: Thu, 20 Sep 2018 17:50:34 -0700
Subject: ssl_security_state_tab_helper.patch

Allows populating security tab info for devtools in Electron.

diff --git a/chrome/browser/ssl/security_state_tab_helper.cc b/chrome/browser/ssl/security_state_tab_helper.cc
index 254f203e4db90b9ad09022409defc82a6dfa6100..3f121d32629920284ed45201f423ae5747fc994f 100644
--- a/chrome/browser/ssl/security_state_tab_helper.cc
+++ b/chrome/browser/ssl/security_state_tab_helper.cc
@@ -12,16 +12,20 @@
 #include "base/strings/pattern.h"
 #include "base/strings/string_util.h"
 #include "build/build_config.h"
+#if 0
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/safe_browsing/safe_browsing_service.h"
 #include "chrome/browser/safe_browsing/ui_manager.h"
+#endif
 #include "chrome/common/chrome_switches.h"
 #include "chrome/common/pref_names.h"
 #include "chrome/common/secure_origin_whitelist.h"
 #include "components/omnibox/browser/omnibox_field_trial.h"
 #include "components/prefs/pref_service.h"
+#if 0
 #include "components/safe_browsing/features.h"
+#endif
 #include "components/security_state/content/content_utils.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/navigation_entry.h"
@@ -42,7 +46,7 @@
 #include "chrome/browser/chromeos/policy/policy_cert_service_factory.h"
 #endif  // defined(OS_CHROMEOS)
 
-#if defined(SAFE_BROWSING_DB_LOCAL)
+#if 0
 #include "chrome/browser/safe_browsing/chrome_password_protection_service.h"
 #endif
 
@@ -78,7 +82,9 @@ bool IsOriginSecureWithWhitelist(
 
 }  // namespace
 
+#if 0
 using safe_browsing::SafeBrowsingUIManager;
+#endif
 
 SecurityStateTabHelper::SecurityStateTabHelper(
     content::WebContents* web_contents)
@@ -138,6 +144,7 @@ void SecurityStateTabHelper::DidFinishNavigation(
     UMA_HISTOGRAM_BOOLEAN("interstitial.ssl.visited_site_after_warning", true);
   }
 
+#if 0
   // Security indicator UI study (https://crbug.com/803501): Show a message in
   // the console to reduce developer confusion about the experimental UI
   // treatments for HTTPS pages with EV certificates.
@@ -165,6 +172,7 @@ void SecurityStateTabHelper::DidFinishNavigation(
           "Validation is still valid.");
     }
   }
+#endif
 }
 
 void SecurityStateTabHelper::DidChangeVisibleSecurityState() {
@@ -190,6 +198,7 @@ SecurityStateTabHelper::GetMaliciousContentStatus() const {
       web_contents()->GetController().GetVisibleEntry();
   if (!entry)
     return security_state::MALICIOUS_CONTENT_STATUS_NONE;
+#if 0
   safe_browsing::SafeBrowsingService* sb_service =
       g_browser_process->safe_browsing_service();
   if (!sb_service)
@@ -259,6 +268,7 @@ SecurityStateTabHelper::GetMaliciousContentStatus() const {
         break;
     }
   }
+#endif
   return security_state::MALICIOUS_CONTENT_STATUS_NONE;
 }
 
@@ -277,15 +287,19 @@ std::vector<std::string> SecurityStateTabHelper::GetSecureOriginsAndPatterns()
     const {
   const base::CommandLine& command_line =
       *base::CommandLine::ForCurrentProcess();
+#if 0
   Profile* profile =
       Profile::FromBrowserContext(web_contents()->GetBrowserContext());
   PrefService* prefs = profile->GetPrefs();
+#endif
   std::string origins_str = "";
   if (command_line.HasSwitch(switches::kUnsafelyTreatInsecureOriginAsSecure)) {
     origins_str = command_line.GetSwitchValueASCII(
         switches::kUnsafelyTreatInsecureOriginAsSecure);
+#if 0
   } else if (prefs->HasPrefPath(prefs::kUnsafelyTreatInsecureOriginAsSecure)) {
     origins_str = prefs->GetString(prefs::kUnsafelyTreatInsecureOriginAsSecure);
+#endif
   }
   return secure_origin_whitelist::ParseWhitelist(origins_str);
 }
diff --git a/chrome/common/secure_origin_whitelist.cc b/chrome/common/secure_origin_whitelist.cc
index b70d6ced887d2a2ecb576b20d79e7fc4272e2054..5a75fe115c3c77f4a9edf7913b47341a757d1b42 100644
--- a/chrome/common/secure_origin_whitelist.cc
+++ b/chrome/common/secure_origin_whitelist.cc
@@ -13,7 +13,9 @@
 #include "chrome/common/chrome_switches.h"
 #include "chrome/common/pref_names.h"
 #include "components/prefs/pref_registry_simple.h"
+#if 0
 #include "extensions/common/constants.h"
+#endif
 #include "net/base/registry_controlled_domains/registry_controlled_domain.h"
 #include "url/gurl.h"
 #include "url/origin.h"
@@ -163,7 +165,9 @@ std::vector<std::string> GetWhitelist() {
 
 std::set<std::string> GetSchemesBypassingSecureContextCheck() {
   std::set<std::string> schemes;
+#if 0
   schemes.insert(extensions::kExtensionScheme);
+#endif
   return schemes;
 }
 
