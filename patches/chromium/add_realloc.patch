From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Shelley Vohr <shelley.vohr@gmail.com>
Date: Thu, 20 Sep 2018 17:44:26 -0700
Subject: add_realloc.patch

Blink overrides ArrayBuffer's allocator with its own one, while Node simply
uses malloc and free, so we need to use v8's allocator in Node. As part of the
10.6.0 upgrade, we needed to make SerializerDelegate accept an allocator
argument in its constructor, and override ReallocateBufferMemory and
FreeBufferMemory to use the allocator. We cannot simply allocate and then memcpy
when we override ReallocateBufferMemory, so we therefore need to implement
Realloc on the v8 side and correspondingly in gin.

diff --git a/gin/array_buffer.cc b/gin/array_buffer.cc
index a02797e94f61e8c71428633a4585a625dc5aadbd..305b7d307d233af699e3f495f85de0f8097ff311 100644
--- a/gin/array_buffer.cc
+++ b/gin/array_buffer.cc
@@ -43,6 +43,10 @@ void* ArrayBufferAllocator::AllocateUninitialized(size_t length) {
   return malloc(length);
 }
 
+void* ArrayBufferAllocator::Realloc(void* data, size_t length) {
+  return realloc(data, length);
+}
+
 void ArrayBufferAllocator::Free(void* data, size_t length) {
   free(data);
 }
diff --git a/gin/array_buffer.h b/gin/array_buffer.h
index 2aef366ac8194aa261cbca6abc051f7da8a988d3..3c7d66c81032636abcca4f1538ce9b7f4ddb2de2 100644
--- a/gin/array_buffer.h
+++ b/gin/array_buffer.h
@@ -21,6 +21,7 @@ class ArrayBufferAllocator : public v8::ArrayBuffer::Allocator {
  public:
   void* Allocate(size_t length) override;
   void* AllocateUninitialized(size_t length) override;
+  void* Realloc(void* data, size_t length) override;
   void Free(void* data, size_t length) override;
 
   GIN_EXPORT static ArrayBufferAllocator* SharedInstance();
diff --git a/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc b/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc
index e5deb70f68bb79f020f320f751d85e8c95d4fccb..a3800e63e15da122bfb05a06443c587201ca17b4 100644
--- a/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc
+++ b/third_party/blink/renderer/bindings/core/v8/v8_initializer.cc
@@ -592,6 +592,10 @@ class ArrayBufferAllocator : public v8::ArrayBuffer::Allocator {
         size, ArrayBufferContents::kDontInitialize);
   }
 
+  void* Realloc(void* data, size_t size) override {
+    return ArrayBufferContents::Realloc(data, size);
+  }
+
   void Free(void* data, size_t size) override {
     ArrayBufferContents::FreeMemory(data);
   }
diff --git a/third_party/blink/renderer/core/typed_arrays/array_buffer/array_buffer_contents.cc b/third_party/blink/renderer/core/typed_arrays/array_buffer/array_buffer_contents.cc
index a868934f025d3957419d71eeb4553ce23fcb4707..fd103b2bd1ffc30e95d34101bd1a1e6225f206d8 100644
--- a/third_party/blink/renderer/core/typed_arrays/array_buffer/array_buffer_contents.cc
+++ b/third_party/blink/renderer/core/typed_arrays/array_buffer/array_buffer_contents.cc
@@ -147,6 +147,11 @@ void* ArrayBufferContents::AllocateMemoryOrNull(size_t size,
   return AllocateMemoryWithFlags(size, policy, base::PartitionAllocReturnNull);
 }
 
+void* ArrayBufferContents::Realloc(void* data, size_t size) {
+  return WTF::Partitions::ArrayBufferPartition()->Realloc(data, size,
+      WTF_HEAP_PROFILER_TYPE_NAME(ArrayBufferContents));
+}
+
 void ArrayBufferContents::FreeMemory(void* data) {
   WTF::Partitions::ArrayBufferPartition()->Free(data);
 }
diff --git a/third_party/blink/renderer/core/typed_arrays/array_buffer/array_buffer_contents.h b/third_party/blink/renderer/core/typed_arrays/array_buffer/array_buffer_contents.h
index a597d88799bed96da654d0d6c387bf1cf3dd102b..1f8d9f232e253964dfb12cdda2052226ff6c606d 100644
--- a/third_party/blink/renderer/core/typed_arrays/array_buffer/array_buffer_contents.h
+++ b/third_party/blink/renderer/core/typed_arrays/array_buffer/array_buffer_contents.h
@@ -101,6 +101,7 @@ class CORE_EXPORT ArrayBufferContents {
   void CopyTo(ArrayBufferContents& other);
 
   static void* AllocateMemoryOrNull(size_t, InitializationPolicy);
+  static void* Realloc(void* data, size_t);
   static void FreeMemory(void*);
 
  private:
